/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.nossa.empresa.epicsteam.views;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author francisco.sens
 */
public class CategoriaListaJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CategoriaListaJFrame
     */
    public CategoriaListaJFrame() {
        initComponents();
        carregarCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonNovaCategoria = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCategorias = new javax.swing.JTable();
        jButtonEditar = new javax.swing.JButton();
        jButtonApagar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Categorias");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jButtonNovaCategoria.setText("Nova Categoria");
        jButtonNovaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNovaCategoriaActionPerformed(evt);
            }
        });

        jTableCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCategorias);
        if (jTableCategorias.getColumnModel().getColumnCount() > 0) {
            jTableCategorias.getColumnModel().getColumn(0).setResizable(false);
            jTableCategorias.getColumnModel().getColumn(1).setResizable(false);
        }

        jButtonEditar.setText("Editar");
        jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarActionPerformed(evt);
            }
        });

        jButtonApagar.setText("Apagar");
        jButtonApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonApagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(833, Short.MAX_VALUE)
                        .addComponent(jButtonNovaCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonNovaCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jButtonApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButtonEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNovaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNovaCategoriaActionPerformed
        var jFrame = new CategoriaCadastoJFrame();
        jFrame.setVisible(true);
    }//GEN-LAST:event_jButtonNovaCategoriaActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        carregarCategorias();
    }//GEN-LAST:event_formWindowActivated

    private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
        var modeloTabela = (DefaultTableModel) jTableCategorias.getModel();
        var indiceLinhaSelecionada = jTableCategorias.getSelectedRow();
        var idCategoria = Integer.parseInt(
                modeloTabela.getValueAt(indiceLinhaSelecionada, 0).toString());
        var nomeCategoria = modeloTabela.getValueAt(indiceLinhaSelecionada, 1).toString();
        
        var jFrame = new CategoriaEditarJFrame(idCategoria, nomeCategoria);
        jFrame.setVisible(true);
    }//GEN-LAST:event_jButtonEditarActionPerformed

    private void jButtonApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonApagarActionPerformed
        var modeloTabela = (DefaultTableModel) jTableCategorias.getModel();
        var indiceLinhaSelecionada = jTableCategorias.getSelectedRow();
        var idTexto = modeloTabela.getValueAt(indiceLinhaSelecionada, 0).toString();
        var nome = modeloTabela.getValueAt(indiceLinhaSelecionada, 1).toString();

        var resultado = JOptionPane.showConfirmDialog(null,
                "Deseja realmente apagar a categoria '" + nome + "'?",
                "CUIDADO",
                JOptionPane.YES_NO_OPTION);
        if (resultado == JOptionPane.NO_OPTION || resultado == JOptionPane.CLOSED_OPTION) {
            return;
        }

        var idApagar = Integer.parseInt(idTexto);
        try {
            var url = "jdbc:mysql://localhost:3306/steamdb";
            var usuario = "root";
            var senha = "admin";
            var conexao = DriverManager.getConnection(url, usuario, senha);
            var query = "DELETE FROM categorias WHERE id = " + idApagar;
            var statement = conexao.createStatement();
            statement.execute(query);
            JOptionPane.showMessageDialog(null, "Categoria apagada com sucesso");
            carregarCategorias();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Não foi possível conectar no banco de dados");
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonApagarActionPerformed

    private void carregarCategorias() {
        var modeloTabela = (DefaultTableModel) jTableCategorias.getModel();
        modeloTabela.setRowCount(0);
        try {
            var url = "jdbc:mysql://localhost:3306/steamdb";
            var usuario = "root";
            var senha = "admin";
            // Abre a conexão com banco de dados
            var connection = DriverManager.getConnection(url, usuario, senha);
            // Statement permite executar query no banco de dados
            var statement = connection.createStatement();
            // query pode ser SELECT, INSERT, UPDATE, DELETE, CREATE
            var query = "SELECT id, nome FROM categorias";
            // Executa a consulta na tabela de categorias
            statement.execute(query);
            // Obter a lista dos registros das categorias
            var resultSet = statement.getResultSet();
            // Percorre cada um dos registros das categorias
            while (resultSet.next()) {
                // Obtém o valor da coluna que foi passado no SELECT
                var id = Integer.parseInt(resultSet.getString("id"));
                var nome = resultSet.getString("nome");

                modeloTabela.addRow(new Object[]{
                    id,
                    nome,});
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Não foi possível conectar no banco de dados");
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonApagar;
    private javax.swing.JButton jButtonEditar;
    private javax.swing.JButton jButtonNovaCategoria;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCategorias;
    // End of variables declaration//GEN-END:variables
}
